from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, BotCommand
from datetime import datetime, timedelta

from humanfriendly.terminal import message
from openpyxl.utils import dataframe
from telebot.types import Message


from db import *
import app.kb as kb
import json


#–°–æ–∑–¥–∞–µ—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()

#–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Registration(StatesGroup):
    waiting_for_contact = State()
    waiting_for_day = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞
with open("/Users/admin/Documents/Python_projects/Schedule_bot_for_TUIT/database/translation.json", "r", encoding="utf-8") as f:
    translations = json.load(f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def get_text(key, lang="ru"):
    return translations.get(key, {}).get(lang, key) # –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç —Ç–æ –≤–µ—Ä–Ω–µ—Ç —Å–∞–º key

# –ö–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="–û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"),
        BotCommand(command="/time", description="–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π"),
        BotCommand(command="/info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands) # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
user_languages = {}

# handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start
@router.message(Command("start"))
async def command_start(msg: types.Message, state: FSMContext):
    await msg.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {msg.from_user.first_name}.\n'
                     f'–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nTilni tanlang:',
                     reply_markup=kb.language_keyboard)


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–º–æ—â–∏
@router.message(Command('help'))
async def get_help(msg: types.Message):
    await msg.answer(text = "–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!")


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@router.message(lambda msg: msg.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "üá∫üáø O'zbek tili"])
async def language_selected(msg: types.Message):
    user_id = msg.from_user.id
    if msg.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫":
        user_languages[user_id] = "ru"
        await msg.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. üá∑üá∫\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                         reply_markup=kb.get_number_keyboard())
    else:
        user_languages[user_id] = "uz"
        await msg.answer("Siz o'zbek tilini tanladingiz. üá∫üáø\n"
                         "Iltimos, Telefon raqamingizni jonating",
                         reply_markup=kb.get_number_keyboard())



# handler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(lambda msg: msg.contact is not None)
async def check_phone(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    lang = user_languages.get(user_id, "ru")
    user_phone = normalize_phone(msg.contact.phone_number)

    if is_teacher_registered(user_phone):
        await msg.answer(get_text("choose_schedule", lang),
                         reply_markup=kb.schedule_keyboard())

    else:
        await msg.answer(get_text("not_registered", lang),
                         reply_markup=ReplyKeyboardRemove())


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.message(lambda msg: msg.text in translations["days_button"]["ru"] + translations["days_button"]["uz"])
async def handle_schedule_choice(msg: types.Message):
    user_id = msg.from_user.id
    lang = user_languages.get(user_id, "ru")
    if msg.text == translations["days_button"]:
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏–∫—É –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await msg.answer(translations["today's_schedule_answer"])
    elif msg.text == translations["days_button"]:
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await msg.answer(translations["tomorrow's_schedule_answer"])
    elif msg.text == translations["days_button"]:
        await msg.answer(
            translations["weekly's_schedule_answer"],
            reply_markup=kb.days_keyboard()
        )


def get_schedule_for_day(date):
    day_of_week = date.strftime("%A")

    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    days_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    day_of_week = days_ru[day_of_week]

    #–§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    filtered = df[df["–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"] == day_of_week]

    if filtered.empty:
        return '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'

    result = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_of_week}:\n\n'
    for _, row in filtered.iterrows():
        result += f"üïí {row['–ù—É–º–µ—Ä–∞—Ü–∏—è –ø–∞—Ä']}: {row['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞']} ({row['–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏']})\n"

    return result


# Handler –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@router.message(lambda msg: msg.text in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"])
async def handle_day_choice(msg: types.Message):
    await msg.answer(f"–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {msg.text.lower()}:")

# Handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda msg: msg.text == "–ù–∞–∑–∞–¥")
async def handle_back_button(msg: types.Message):
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=kb.schedule_keyboard()
    )

